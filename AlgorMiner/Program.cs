using System;
using System.Diagnostics;

public class Dynamic
{
    static int GetMaxGold(int[,] gold, int n, int m)// kaštai | kartai
    {
        // Initialize dp array
        int[,] dp = new int[n, m];//                   c1 | 1
        for (int i = 0; i < n; i++)//                c2 | n
        {
            dp[i, 0] = gold[i, 0];//                   c3 | n
        }


        // Fill dp array using recurrence relation
        for (int j = 1; j < m; j++)//                   c4 | n
        {
            for (int i = 0; i < n; i++)//               c5 | n^2
            {
                int left = (i > 0) ? dp[i - 1, j - 1] : 0;//               c6 | n^2
                int left_down = (i < n - 1) ? dp[i + 1, j - 1] : 0;//               c7 | n^2
                int left_up = dp[i, j - 1];//               c8 | n^2
                dp[i, j] = gold[i, j] + Math.Max(left, Math.Max(left_down, left_up));//               c9 | n^2
            }
        }

        // Find maximum gold in last column
        int maxGold = dp[0, m - 1];//               c10 | 1
        for (int i = 1; i < n; i++)//               c11 | n
        {
            maxGold = Math.Max(maxGold, dp[i, m - 1]);//               c12 | n
        }

        return maxGold;//               c13 | 1
    }

    public static void Main(string[] args)
    {

        /*int[,] gold = { {1, 3, 1, 5},
                        {2, 2, 4, 1},
                        {5, 0, 2, 3},
                        {0, 6, 1, 2} };
        */
        /*int[,] gold = {
            {1, 0, 3, 5, 2, 0, 1, 9},
            {2, 4, 6, 0, 1, 5, 2, 0},
            {1, 0, 3, 4, 0, 2, 6, 1},
            {0, 9, 1, 3, 7, 0, 4, 2},
            {4, 2, 0, 6, 1, 3, 5, 0},
            {0, 7, 5, 2, 1, 0, 3, 6},
            {1, 0, 2, 6, 3, 1, 0, 2},
            {5, 2, 0, 1, 0, 9, 3, 4}

        };*/
        /*int[,] gold = {
            {1, 0, 3, 5, 2, 0, 1, 9, 4, 0, 7, 2},
            {2, 4, 6, 0, 1, 5, 2, 0, 1, 8, 3, 5},
            {1, 0, 3, 4, 0, 2, 6, 1, 0, 2, 6, 3},
            {0, 9, 1, 3, 7, 0, 4, 2, 1, 5, 2, 0},
            {4, 2, 0, 6, 1, 3, 5, 0, 2, 4, 1, 9},
            {0, 7, 5, 2, 1, 0, 3, 6, 4, 0, 3, 1},
            {1, 0, 2, 6, 3, 1, 0, 2, 6, 1, 5, 2},
            {5, 2, 0, 1, 0, 9, 3, 4, 0, 2, 7, 1},
            {6, 1, 0, 4, 2, 0, 8, 3, 1, 0, 6, 3},
            {2, 3, 5, 0, 1, 9, 6, 0, 2, 1, 4, 0},
            {0, 1, 6, 3, 0, 2, 4, 5, 1, 3, 7, 0},
            {1, 2, 0, 5, 3, 1, 0, 6, 0, 9, 4, 2}

        };*/
        int[,] gold = {
            {10, 33, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
            {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
            {44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59},
            {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75},
            {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91},
            {10, 33, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
            {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
            {44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59},
            {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75},
            {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91},
            {10, 33, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
            {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
            {44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59},
            {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75},
            {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91},
            {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75},
        };
        int n = gold.GetLength(0);
        int m = gold.GetLength(1);
        Stopwatch sw = new Stopwatch();
        sw.Start();
        Console.WriteLine("Maximum amount of gold that can be collected: {0}", GetMaxGold(gold, n, m));
        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        Console.WriteLine(Math.Pow(2, (double)n));
        sw.Reset();
       
    }
}
